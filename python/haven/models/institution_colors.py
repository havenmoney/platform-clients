# coding: utf-8

"""
    Haven Money API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InstitutionColors(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dark': 'str',
        'darker': 'str',
        'light': 'str',
        'primary': 'str'
    }

    attribute_map = {
        'dark': 'dark',
        'darker': 'darker',
        'light': 'light',
        'primary': 'primary'
    }

    def __init__(self, dark=None, darker=None, light=None, primary=None):  # noqa: E501
        """InstitutionColors - a model defined in OpenAPI"""  # noqa: E501

        self._dark = None
        self._darker = None
        self._light = None
        self._primary = None
        self.discriminator = None

        self.dark = dark
        self.darker = darker
        self.light = light
        self.primary = primary

    @property
    def dark(self):
        """Gets the dark of this InstitutionColors.  # noqa: E501


        :return: The dark of this InstitutionColors.  # noqa: E501
        :rtype: str
        """
        return self._dark

    @dark.setter
    def dark(self, dark):
        """Sets the dark of this InstitutionColors.


        :param dark: The dark of this InstitutionColors.  # noqa: E501
        :type: str
        """
        if dark is None:
            raise ValueError("Invalid value for `dark`, must not be `None`")  # noqa: E501

        self._dark = dark

    @property
    def darker(self):
        """Gets the darker of this InstitutionColors.  # noqa: E501


        :return: The darker of this InstitutionColors.  # noqa: E501
        :rtype: str
        """
        return self._darker

    @darker.setter
    def darker(self, darker):
        """Sets the darker of this InstitutionColors.


        :param darker: The darker of this InstitutionColors.  # noqa: E501
        :type: str
        """
        if darker is None:
            raise ValueError("Invalid value for `darker`, must not be `None`")  # noqa: E501

        self._darker = darker

    @property
    def light(self):
        """Gets the light of this InstitutionColors.  # noqa: E501


        :return: The light of this InstitutionColors.  # noqa: E501
        :rtype: str
        """
        return self._light

    @light.setter
    def light(self, light):
        """Sets the light of this InstitutionColors.


        :param light: The light of this InstitutionColors.  # noqa: E501
        :type: str
        """
        if light is None:
            raise ValueError("Invalid value for `light`, must not be `None`")  # noqa: E501

        self._light = light

    @property
    def primary(self):
        """Gets the primary of this InstitutionColors.  # noqa: E501


        :return: The primary of this InstitutionColors.  # noqa: E501
        :rtype: str
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this InstitutionColors.


        :param primary: The primary of this InstitutionColors.  # noqa: E501
        :type: str
        """
        if primary is None:
            raise ValueError("Invalid value for `primary`, must not be `None`")  # noqa: E501

        self._primary = primary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstitutionColors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
