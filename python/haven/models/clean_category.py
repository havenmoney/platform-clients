# coding: utf-8

"""
    Haven Money API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CleanCategory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ARTS = "Arts"
    MUSIC = "Music"
    MOVIES_TELEVISION = "Movies & Television"
    NEWSPAPER_MAGAZINES = "Newspaper & Magazines"
    OTHER_ENTERTAINMENT = "Other Entertainment"
    THEATER = "Theater"
    GAMBLING = "Gambling"
    DEPOSIT = "Deposit"
    WITHDRAWAL = "Withdrawal"
    DIVIDENDS = "Dividends"
    BUY = "Buy"
    SELL = "Sell"
    OTHER_INVESTMENTS = "Other Investments"
    GAS_FUEL = "Gas & Fuel"
    CAR_PARTS = "Car Parts"
    TOLL_FEE = "Toll Fee"
    PARKING = "Parking"
    TRAFFIC_TICKETS = "Traffic Tickets"
    MAINTENANCE_REPAIRS = "Maintenance & Repairs"
    AUTO_PAYMENT = "Auto Payment"
    AUTO_INSURANCE = "Auto Insurance"
    PUBLIC_TRANSPORTATION = "Public Transportation"
    OTHER_CAR = "Other Car"
    TAXI = "Taxi"
    BOAT = "Boat"
    AIR_TRAVEL = "Air Travel"
    LODGING = "Lodging"
    RIDE_SHARE_RENTAL = "Ride Share & Rental"
    OTHER_TRAVEL = "Other Travel"
    ACCOUNT_MAINTENANCE = "Account Maintenance"
    OVERDRAFT_FEE = "Overdraft Fee"
    INSUFFICIENT_FUNDS_FEE = "Insufficient Funds Fee"
    ATM_FEE = "ATM Fee"
    CHECK_ORDER_FEE = "Check Order Fee"
    INTEREST_CHARGED_FEE = "Interest Charged Fee"
    FOREIGN_TRANSACTION_FEE = "Foreign Transaction Fee"
    WIRE_FEE = "Wire Fee"
    EXCESSIVE_TRANSACTIONS_FEE = "Excessive Transactions Fee"
    LATE_FEE = "Late Fee"
    CARD_MEMBERSHIP_FEE = "Card Membership Fee"
    OTHER_FEE = "Other Fee"
    RENT = "Rent"
    MORTGAGE = "Mortgage"
    OTHER_HOUSING = "Other Housing"
    RENT_REIMBURSEMENT = "Rent Reimbursement"
    YARD_GARDEN = "Yard & Garden"
    CREDIT_CARD_PAYMENT = "Credit card payment"
    ATM_WITHDRAWALS = "ATM Withdrawals"
    INTERNAL_TRANSFER = "Internal Transfer"
    EXTERNAL_TRANSFER = "External Transfer"
    OTHER_TRANSFER = "Other Transfer"
    LOAN_PAYMENT = "Loan Payment"
    SERVICES = "Services"
    LEGAL_SERVICES = "Legal Services"
    ACCOUNTING_SERVICES = "Accounting Services"
    REAL_ESTATE_SERVICES = "Real Estate Services"
    BUSINESS_SERVICES = "Business Services"
    COMPUTER_SERVICES = "Computer Services"
    ONLINE_SUBSCRIPTIONS = "Online Subscriptions"
    FINANCIAL_SERVICES = "Financial Services"
    CLEANING_SERVICES = "Cleaning Services"
    INTERNET = "Internet"
    HOME_INSURANCE = "Home Insurance"
    RENTER_S_INSURANCE = "Renter's Insurance"
    LIFE_INSURANCE = "Life Insurance"
    OTHER_INSURANCE = "Other Insurance"
    PHONE_BILL = "Phone Bill"
    UTILITIES = "Utilities"
    TV = "TV"
    OTHER_BILLS = "Other Bills"
    PAYCHECK = "Paycheck"
    INTEREST = "Interest"
    REIMBURSEMENT = "Reimbursement"
    OTHER_INCOME = "Other Income"
    TUITION = "Tuition"
    STUDENT_LOAN = "Student Loan"
    OTHER_EDUCATION = "Other Education"
    HEALTH_INSURANCE = "Health Insurance"
    GYM = "Gym"
    DENTIST = "Dentist"
    DOCTOR = "Doctor"
    PHARMACY = "Pharmacy"
    MEDICAL_LABS = "Medical Labs"
    BARBER_AND_SALON = "Barber and Salon"
    SPA = "Spa"
    NAIL_AND_SKIN = "Nail and Skin"
    OTHER_HEALTH_FITNESS = "Other Health & Fitness"
    GROCERIES = "Groceries"
    COFFEE = "Coffee"
    RESTAURANTS = "Restaurants"
    ALCOHOL = "Alcohol"
    BARS_CLUBS = "Bars & Clubs"
    OTHER_FOOD_DINING = "Other Food & Dining"
    CLOTHES_APPAREL = "Clothes & Apparel"
    SPORTING_GOODS = "Sporting Goods"
    ELECTRONICS = "Electronics"
    GAMES = "Games"
    TOBACCO_VAPING = "Tobacco & Vaping"
    CANNABIS = "Cannabis"
    BEAUTY = "Beauty"
    BOOKS = "Books"
    BUSINESS_EQUIPMENT = "Business Equipment"
    HOME_HARDWARE = "Home Hardware"
    SHIPPING = "Shipping"
    SOFTWARE = "Software"
    GUNS_WEAPONS = "Guns & Weapons"
    TAXES = "Taxes"
    GOVERNMENT_SERVICES = "Government Services"
    FINES = "Fines"
    GIFTS_DONATIONS = "Gifts & Donations"
    SHOPPING = "Shopping"
    OTHER = "Other"
    PETS = "Pets"
    CHILD_CARE = "Child Care"

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """CleanCategory - a model defined in OpenAPI"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CleanCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
