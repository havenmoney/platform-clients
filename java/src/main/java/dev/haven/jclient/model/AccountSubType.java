/*
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.haven.jclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets AccountSubType
 */
@JsonAdapter(AccountSubType.Adapter.class)
public enum AccountSubType {
  
  AUTO("AUTO"),
  
  BROKERAGE("BROKERAGE"),
  
  CASH_ISA("CASH_ISA"),
  
  CASH_MANAGEMENT("CASH_MANAGEMENT"),
  
  CD("CD"),
  
  CHECKING("CHECKING"),
  
  COMMERCIAL("COMMERCIAL"),
  
  CONSTRUCTION("CONSTRUCTION"),
  
  CONSUMER("CONSUMER"),
  
  CREDIT("CREDIT"),
  
  CREDIT_CARD("CREDIT_CARD"),
  
  DEPOSITORY("DEPOSITORY"),
  
  EDUCATION_SAVINGS_ACCOUNT("EDUCATION_SAVINGS_ACCOUNT"),
  
  GIC("GIC"),
  
  HEALTH_REIMBURSEMENT_ARRANGEMENT("HEALTH_REIMBURSEMENT_ARRANGEMENT"),
  
  HOME("HOME"),
  
  HOME_EQUITY("HOME_EQUITY"),
  
  HSA("HSA"),
  
  IRA("IRA"),
  
  ISA("ISA"),
  
  KEOGH("KEOGH"),
  
  LIF("LIF"),
  
  LINE_OF_CREDIT("LINE_OF_CREDIT"),
  
  LIRA("LIRA"),
  
  LOAN("LOAN"),
  
  LRIF("LRIF"),
  
  LRSP("LRSP"),
  
  MONEY_MARKET("MONEY_MARKET"),
  
  MORTGAGE("MORTGAGE"),
  
  MUTUAL_FUND("MUTUAL_FUND"),
  
  NON_TAXABLE_BROKERAGE_ACCOUNT("NON_TAXABLE_BROKERAGE_ACCOUNT"),
  
  OTHER("OTHER"),
  
  OVERDRAFT("OVERDRAFT"),
  
  PAYPAL("PAYPAL"),
  
  PENSION("PENSION"),
  
  PREPAID("PREPAID"),
  
  PRIF("PRIF"),
  
  PROFIT_SHARING_PLAN("PROFIT_SHARING_PLAN"),
  
  RDSP("RDSP"),
  
  RECURRING("RECURRING"),
  
  RESP("RESP"),
  
  RETIREMENT("RETIREMENT"),
  
  REWARDS("REWARDS"),
  
  RLIF("RLIF"),
  
  ROTH("ROTH"),
  
  ROTH_401K("ROTH_401K"),
  
  RRIF("RRIF"),
  
  RRSP("RRSP"),
  
  SAFE_DEPOSIT("SAFE_DEPOSIT"),
  
  SARSEP("SARSEP"),
  
  SAVINGS("SAVINGS"),
  
  SEP_IRA("SEP_IRA"),
  
  SIMPLE_IRA("SIMPLE_IRA"),
  
  SIPP("SIPP"),
  
  STOCK_PLAN("STOCK_PLAN"),
  
  STUDENT("STUDENT"),
  
  TFSA("TFSA"),
  
  THRIFT_SAVINGS_PLAN("THRIFT_SAVINGS_PLAN"),
  
  T_401A("T_401A"),
  
  T_401K("T_401K"),
  
  T_403B("T_403B"),
  
  T_457B("T_457B"),
  
  T_529("T_529"),
  
  UGMA("UGMA"),
  
  UTMA("UTMA"),
  
  VARIABLE_ANNUITY("VARIABLE_ANNUITY");

  private String value;

  AccountSubType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AccountSubType fromValue(String value) {
    for (AccountSubType b : AccountSubType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AccountSubType> {
    @Override
    public void write(final JsonWriter jsonWriter, final AccountSubType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AccountSubType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AccountSubType.fromValue(value);
    }
  }
}

