buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

plugins {
    id 'java-library-distribution'
}

wrapper {
    gradleVersion = '5.5'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'dev.haven'
version = '1.0'

repositories {
    mavenCentral()
}


if(hasProperty('target') && target == 'android') {

    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'

    android {
        compileSdkVersion 25
        buildToolsVersion '25.0.2'
        defaultConfig {
            minSdkVersion 14
            targetSdkVersion 25
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        // Rename the aar correctly
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.aar')) {
                    def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

        dependencies {
            provided 'javax.annotation:jsr250-api:1.0'
        }
    }

    afterEvaluate {
        android.libraryVariants.all { variant ->
            def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
            task.description = "Create jar artifact for ${variant.name}"
            task.dependsOn variant.javaCompile
            task.from variant.javaCompile.destinationDir
            task.destinationDir = project.file("${project.buildDir}/outputs/jar")
            task.archiveName = "${project.name}-${variant.baseName}-${version}.jar"
            artifacts.add('archives', task);
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    artifacts {
        archives sourcesJar
    }

} else {

    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7

    install {
        repositories.mavenInstaller {
            pom.artifactId = 'openapi-java-client'
        }
    }

    task execute(type:JavaExec) {
       main = System.getProperty('mainClass')
       classpath = sourceSets.main.runtimeClasspath
    }
}

ext {
    oltu_version = "1.0.1"
    retrofit_version = "2.3.0"
    swagger_annotations_version = "1.5.22"
    junit_version = "4.12"
    threetenbp_version = "1.3.5"
    json_fire_version = "1.8.0"
}

dependencies {
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-scalars:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "io.swagger:swagger-annotations:$swagger_annotations_version"
    compile ("org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:$oltu_version"){
        exclude group:'org.apache.oltu.oauth2' , module: 'org.apache.oltu.oauth2.common'
    }
    compile "io.gsonfire:gson-fire:$json_fire_version"
    compile "org.threeten:threetenbp:$threetenbp_version"

    testCompile "junit:junit:$junit_version"
}


task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar, sourcesJar, javadocJar
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'dev.haven'
            artifactId 'java-retrofit-client'

            from components.java

            pom.withXml {
                // MavenJava == the pub name (camelCased version of the outer scope here)
                def pomFile = file("${project.buildDir}/publications/MavenJava/generated-pom.xml")
                writeTo(pomFile)
            }

            artifact(sourcesJar) {
                classifier = 'sources'
            }

            artifact(javadocJar) {
                classifier = 'javadoc'
            }
        }
    }

    repositories {
        maven {
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            // def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/publications/MavenJava/generated-pom.xml")
    }
}

signing {
    sign publishing.publications.mavenJava
}

def customizePom(pom) {
        pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Java client for using the https://haven.dev API'
            name 'haven.dev Api Client'
            url 'https://github.com/havenmoney/platform-clients'
            organization {
                name 'dev.haven'
                url 'https://github.com/havenmoney'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/havenmoney/platform-clients/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/havenmoney/platform-clients/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/havenmoney/platform-clients'
                connection 'scm:git:git://github.com/havenmoney/platform-clients.git'
                developerConnection 'scm:git:ssh://git@github.com:havenmoney/platform-clients.git'
            }
            developers {
                developer {
                    name 'Haven Money'
                }
            }
        }
    }

}


distributions {
    main {
        baseName = 'java-retrofit-client'
    }
}
