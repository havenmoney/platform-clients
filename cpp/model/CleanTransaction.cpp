/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CleanTransaction.h"

namespace dev {
namespace haven {
namespace client {
namespace model {




CleanTransaction::CleanTransaction()
{
    m_Id = utility::conversions::to_string_t("");
    m_Account = utility::conversions::to_string_t("");
    m_User = utility::conversions::to_string_t("");
    m_Memo = utility::conversions::to_string_t("");
    m_RawMemo = utility::conversions::to_string_t("");
    m_Network = utility::conversions::to_string_t("");
    m_NetworkIsSet = false;
    m_UserTransactedAt = utility::datetime();
    m_UserTransactedAtIsSet = false;
    m_Amount = utility::conversions::to_string_t("");
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Image = utility::conversions::to_string_t("");
    m_ImageIsSet = false;
    m_BackgroundImage = utility::conversions::to_string_t("");
    m_BackgroundImageIsSet = false;
    m_ExcludeFromBreakdowns = false;
    m_Merchant = utility::conversions::to_string_t("");
    m_MerchantIsSet = false;
    m_MerchantAddressIsSet = false;
}

CleanTransaction::~CleanTransaction()
{
}

void CleanTransaction::validate()
{
    // TODO: implement validation
}

web::json::value CleanTransaction::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("account")] = ModelBase::toJson(m_Account);
    val[utility::conversions::to_string_t("user")] = ModelBase::toJson(m_User);
    val[utility::conversions::to_string_t("memo")] = ModelBase::toJson(m_Memo);
    val[utility::conversions::to_string_t("rawMemo")] = ModelBase::toJson(m_RawMemo);
    if(m_NetworkIsSet)
    {
        val[utility::conversions::to_string_t("network")] = ModelBase::toJson(m_Network);
    }
    if(m_UserTransactedAtIsSet)
    {
        val[utility::conversions::to_string_t("userTransactedAt")] = ModelBase::toJson(m_UserTransactedAt);
    }
    val[utility::conversions::to_string_t("amount")] = ModelBase::toJson(m_Amount);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Categories )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("categories")] = web::json::value::array(jsonArray);
    }
    val[utility::conversions::to_string_t("cleanCategory")] = ModelBase::toJson(m_CleanCategory);
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);
    }
    if(m_ImageIsSet)
    {
        val[utility::conversions::to_string_t("image")] = ModelBase::toJson(m_Image);
    }
    if(m_BackgroundImageIsSet)
    {
        val[utility::conversions::to_string_t("backgroundImage")] = ModelBase::toJson(m_BackgroundImage);
    }
    val[utility::conversions::to_string_t("excludeFromBreakdowns")] = ModelBase::toJson(m_ExcludeFromBreakdowns);
    if(m_MerchantIsSet)
    {
        val[utility::conversions::to_string_t("merchant")] = ModelBase::toJson(m_Merchant);
    }
    if(m_MerchantAddressIsSet)
    {
        val[utility::conversions::to_string_t("merchantAddress")] = ModelBase::toJson(m_MerchantAddress);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Historical )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("historical")] = web::json::value::array(jsonArray);
    }

    return val;
}

void CleanTransaction::fromJson(const web::json::value& val)
{
    setId(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("id"))));
    setAccount(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("account"))));
    setUser(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("user"))));
    setMemo(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("memo"))));
    setRawMemo(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("rawMemo"))));
    if(val.has_field(utility::conversions::to_string_t("network")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("network"));
        if(!fieldValue.is_null())
        {
            setNetwork(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userTransactedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userTransactedAt"));
        if(!fieldValue.is_null())
        {
            setUserTransactedAt(ModelBase::dateFromJson(fieldValue));
        }
    }
    setAmount(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("amount"))));
    {
        m_Categories.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val.at(utility::conversions::to_string_t("categories")).as_array() )
        {
            m_Categories.push_back(ModelBase::stringFromJson(item));
        }
    }
    std::shared_ptr<CleanCategory> newCleanCategory(new CleanCategory());
    newCleanCategory->fromJson(val.at(utility::conversions::to_string_t("cleanCategory")));
    setCleanCategory( newCleanCategory );
    if(val.has_field(utility::conversions::to_string_t("url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("url"));
        if(!fieldValue.is_null())
        {
            setUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("image")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("image"));
        if(!fieldValue.is_null())
        {
            setImage(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("backgroundImage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("backgroundImage"));
        if(!fieldValue.is_null())
        {
            setBackgroundImage(ModelBase::stringFromJson(fieldValue));
        }
    }
    setExcludeFromBreakdowns(ModelBase::boolFromJson(val.at(utility::conversions::to_string_t("excludeFromBreakdowns"))));
    if(val.has_field(utility::conversions::to_string_t("merchant")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("merchant"));
        if(!fieldValue.is_null())
        {
            setMerchant(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("merchantAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("merchantAddress"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Address> newItem(new Address());
            newItem->fromJson(fieldValue);
            setMerchantAddress( newItem );
        }
    }
    {
        m_Historical.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val.at(utility::conversions::to_string_t("historical")).as_array() )
        {
            m_Historical.push_back(ModelBase::stringFromJson(item));
        }
    }
}

void CleanTransaction::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account"), m_Account));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user"), m_User));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("memo"), m_Memo));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rawMemo"), m_RawMemo));
    if(m_NetworkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("network"), m_Network));
    }
    if(m_UserTransactedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userTransactedAt"), m_UserTransactedAt));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amount"), m_Amount));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Categories )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("categories"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    m_CleanCategory->toMultipart(multipart, utility::conversions::to_string_t("cleanCategory."));
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url"), m_Url));
    }
    if(m_ImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("image"), m_Image));
    }
    if(m_BackgroundImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("backgroundImage"), m_BackgroundImage));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("excludeFromBreakdowns"), m_ExcludeFromBreakdowns));
    if(m_MerchantIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("merchant"), m_Merchant));
    }
    if(m_MerchantAddressIsSet)
    {
        if (m_MerchantAddress.get())
        {
            m_MerchantAddress->toMultipart(multipart, utility::conversions::to_string_t("merchantAddress."));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Historical )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("historical"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
}

void CleanTransaction::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setAccount(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("account"))));
    setUser(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user"))));
    setMemo(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("memo"))));
    setRawMemo(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("rawMemo"))));
    if(multipart->hasContent(utility::conversions::to_string_t("network")))
    {
        setNetwork(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("network"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userTransactedAt")))
    {
        setUserTransactedAt(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("userTransactedAt"))));
    }
    setAmount(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("amount"))));
    {
        m_Categories.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("categories"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Categories.push_back(ModelBase::stringFromJson(item));
        }
    }
    std::shared_ptr<CleanCategory> newCleanCategory(new CleanCategory());
    newCleanCategory->fromMultiPart(multipart, utility::conversions::to_string_t("cleanCategory."));
    setCleanCategory( newCleanCategory );
    if(multipart->hasContent(utility::conversions::to_string_t("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("url"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("image")))
    {
        setImage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("image"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("backgroundImage")))
    {
        setBackgroundImage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("backgroundImage"))));
    }
    setExcludeFromBreakdowns(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("excludeFromBreakdowns"))));
    if(multipart->hasContent(utility::conversions::to_string_t("merchant")))
    {
        setMerchant(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("merchant"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("merchantAddress")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("merchantAddress")))
        {
            std::shared_ptr<Address> newItem(new Address());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("merchantAddress."));
            setMerchantAddress( newItem );
        }
    }
    {
        m_Historical.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("historical"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Historical.push_back(ModelBase::stringFromJson(item));
        }
    }
}

utility::string_t CleanTransaction::getId() const
{
    return m_Id;
}

void CleanTransaction::setId(const utility::string_t& value)
{
    m_Id = value;
    
}

utility::string_t CleanTransaction::getAccount() const
{
    return m_Account;
}

void CleanTransaction::setAccount(const utility::string_t& value)
{
    m_Account = value;
    
}

utility::string_t CleanTransaction::getUser() const
{
    return m_User;
}

void CleanTransaction::setUser(const utility::string_t& value)
{
    m_User = value;
    
}

utility::string_t CleanTransaction::getMemo() const
{
    return m_Memo;
}

void CleanTransaction::setMemo(const utility::string_t& value)
{
    m_Memo = value;
    
}

utility::string_t CleanTransaction::getRawMemo() const
{
    return m_RawMemo;
}

void CleanTransaction::setRawMemo(const utility::string_t& value)
{
    m_RawMemo = value;
    
}

utility::string_t CleanTransaction::getNetwork() const
{
    return m_Network;
}

void CleanTransaction::setNetwork(const utility::string_t& value)
{
    m_Network = value;
    m_NetworkIsSet = true;
}

bool CleanTransaction::networkIsSet() const
{
    return m_NetworkIsSet;
}

void CleanTransaction::unsetNetwork()
{
    m_NetworkIsSet = false;
}

utility::datetime CleanTransaction::getUserTransactedAt() const
{
    return m_UserTransactedAt;
}

void CleanTransaction::setUserTransactedAt(const utility::datetime& value)
{
    m_UserTransactedAt = value;
    m_UserTransactedAtIsSet = true;
}

bool CleanTransaction::userTransactedAtIsSet() const
{
    return m_UserTransactedAtIsSet;
}

void CleanTransaction::unsetUserTransactedAt()
{
    m_UserTransactedAtIsSet = false;
}

utility::string_t CleanTransaction::getAmount() const
{
    return m_Amount;
}

void CleanTransaction::setAmount(const utility::string_t& value)
{
    m_Amount = value;
    
}

std::vector<utility::string_t>& CleanTransaction::getCategories()
{
    return m_Categories;
}

void CleanTransaction::setCategories(const std::vector<utility::string_t>& value)
{
    m_Categories = value;
    
}

std::shared_ptr<CleanCategory> CleanTransaction::getCleanCategory() const
{
    return m_CleanCategory;
}

void CleanTransaction::setCleanCategory(const std::shared_ptr<CleanCategory>& value)
{
    m_CleanCategory = value;
    
}

utility::string_t CleanTransaction::getUrl() const
{
    return m_Url;
}

void CleanTransaction::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool CleanTransaction::urlIsSet() const
{
    return m_UrlIsSet;
}

void CleanTransaction::unsetUrl()
{
    m_UrlIsSet = false;
}

utility::string_t CleanTransaction::getImage() const
{
    return m_Image;
}

void CleanTransaction::setImage(const utility::string_t& value)
{
    m_Image = value;
    m_ImageIsSet = true;
}

bool CleanTransaction::imageIsSet() const
{
    return m_ImageIsSet;
}

void CleanTransaction::unsetImage()
{
    m_ImageIsSet = false;
}

utility::string_t CleanTransaction::getBackgroundImage() const
{
    return m_BackgroundImage;
}

void CleanTransaction::setBackgroundImage(const utility::string_t& value)
{
    m_BackgroundImage = value;
    m_BackgroundImageIsSet = true;
}

bool CleanTransaction::backgroundImageIsSet() const
{
    return m_BackgroundImageIsSet;
}

void CleanTransaction::unsetBackgroundImage()
{
    m_BackgroundImageIsSet = false;
}

bool CleanTransaction::isExcludeFromBreakdowns() const
{
    return m_ExcludeFromBreakdowns;
}

void CleanTransaction::setExcludeFromBreakdowns(bool value)
{
    m_ExcludeFromBreakdowns = value;
    
}

utility::string_t CleanTransaction::getMerchant() const
{
    return m_Merchant;
}

void CleanTransaction::setMerchant(const utility::string_t& value)
{
    m_Merchant = value;
    m_MerchantIsSet = true;
}

bool CleanTransaction::merchantIsSet() const
{
    return m_MerchantIsSet;
}

void CleanTransaction::unsetMerchant()
{
    m_MerchantIsSet = false;
}

std::shared_ptr<Address> CleanTransaction::getMerchantAddress() const
{
    return m_MerchantAddress;
}

void CleanTransaction::setMerchantAddress(const std::shared_ptr<Address>& value)
{
    m_MerchantAddress = value;
    m_MerchantAddressIsSet = true;
}

bool CleanTransaction::merchantAddressIsSet() const
{
    return m_MerchantAddressIsSet;
}

void CleanTransaction::unsetMerchantAddress()
{
    m_MerchantAddressIsSet = false;
}

std::vector<utility::string_t>& CleanTransaction::getHistorical()
{
    return m_Historical;
}

void CleanTransaction::setHistorical(const std::vector<utility::string_t>& value)
{
    m_Historical = value;
    
}

}
}
}
}


