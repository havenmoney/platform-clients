/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "InstitutionColors.h"

namespace dev {
namespace haven {
namespace client {
namespace model {




InstitutionColors::InstitutionColors()
{
    m_Dark = utility::conversions::to_string_t("");
    m_Darker = utility::conversions::to_string_t("");
    m_Light = utility::conversions::to_string_t("");
    m_Primary = utility::conversions::to_string_t("");
}

InstitutionColors::~InstitutionColors()
{
}

void InstitutionColors::validate()
{
    // TODO: implement validation
}

web::json::value InstitutionColors::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("dark")] = ModelBase::toJson(m_Dark);
    val[utility::conversions::to_string_t("darker")] = ModelBase::toJson(m_Darker);
    val[utility::conversions::to_string_t("light")] = ModelBase::toJson(m_Light);
    val[utility::conversions::to_string_t("primary")] = ModelBase::toJson(m_Primary);

    return val;
}

void InstitutionColors::fromJson(const web::json::value& val)
{
    setDark(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("dark"))));
    setDarker(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("darker"))));
    setLight(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("light"))));
    setPrimary(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("primary"))));
}

void InstitutionColors::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dark"), m_Dark));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("darker"), m_Darker));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("light"), m_Light));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("primary"), m_Primary));
}

void InstitutionColors::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setDark(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dark"))));
    setDarker(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("darker"))));
    setLight(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("light"))));
    setPrimary(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("primary"))));
}

utility::string_t InstitutionColors::getDark() const
{
    return m_Dark;
}

void InstitutionColors::setDark(const utility::string_t& value)
{
    m_Dark = value;
    
}

utility::string_t InstitutionColors::getDarker() const
{
    return m_Darker;
}

void InstitutionColors::setDarker(const utility::string_t& value)
{
    m_Darker = value;
    
}

utility::string_t InstitutionColors::getLight() const
{
    return m_Light;
}

void InstitutionColors::setLight(const utility::string_t& value)
{
    m_Light = value;
    
}

utility::string_t InstitutionColors::getPrimary() const
{
    return m_Primary;
}

void InstitutionColors::setPrimary(const utility::string_t& value)
{
    m_Primary = value;
    
}

}
}
}
}


