/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EmptyResponse.h"

namespace dev {
namespace haven {
namespace client {
namespace model {




EmptyResponse::EmptyResponse()
{
    m_a = 0;
    m_aIsSet = false;
}

EmptyResponse::~EmptyResponse()
{
}

void EmptyResponse::validate()
{
    // TODO: implement validation
}

web::json::value EmptyResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_aIsSet)
    {
        val[utility::conversions::to_string_t("a")] = ModelBase::toJson(m_a);
    }

    return val;
}

void EmptyResponse::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("a")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("a"));
        if(!fieldValue.is_null())
        {
            setA(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void EmptyResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_aIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("a"), m_a));
    }
}

void EmptyResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("a")))
    {
        setA(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("a"))));
    }
}

int32_t EmptyResponse::getA() const
{
    return m_a;
}

void EmptyResponse::setA(int32_t value)
{
    m_a = value;
    m_aIsSet = true;
}

bool EmptyResponse::AIsSet() const
{
    return m_aIsSet;
}

void EmptyResponse::unseta()
{
    m_aIsSet = false;
}

}
}
}
}


