/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AddAnnotationRequest.h"

namespace dev {
namespace haven {
namespace client {
namespace model {




AddAnnotationRequest::AddAnnotationRequest()
{
    m_CategoryIsSet = false;
    m_Memo = utility::conversions::to_string_t("");
    m_MemoIsSet = false;
    m_ExcludeFromBreakdowns = false;
    m_ExcludeFromBreakdownsIsSet = false;
}

AddAnnotationRequest::~AddAnnotationRequest()
{
}

void AddAnnotationRequest::validate()
{
    // TODO: implement validation
}

web::json::value AddAnnotationRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CategoryIsSet)
    {
        val[utility::conversions::to_string_t("category")] = ModelBase::toJson(m_Category);
    }
    if(m_MemoIsSet)
    {
        val[utility::conversions::to_string_t("memo")] = ModelBase::toJson(m_Memo);
    }
    if(m_ExcludeFromBreakdownsIsSet)
    {
        val[utility::conversions::to_string_t("excludeFromBreakdowns")] = ModelBase::toJson(m_ExcludeFromBreakdowns);
    }
    val[utility::conversions::to_string_t("bootstrap")] = ModelBase::toJson(m_Bootstrap);

    return val;
}

void AddAnnotationRequest::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("category")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("category"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CleanCategory> newItem(new CleanCategory());
            newItem->fromJson(fieldValue);
            setCategory( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("memo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("memo"));
        if(!fieldValue.is_null())
        {
            setMemo(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("excludeFromBreakdowns")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("excludeFromBreakdowns"));
        if(!fieldValue.is_null())
        {
            setExcludeFromBreakdowns(ModelBase::boolFromJson(fieldValue));
        }
    }
    std::shared_ptr<BootstrapStrategy> newBootstrap(new BootstrapStrategy());
    newBootstrap->fromJson(val.at(utility::conversions::to_string_t("bootstrap")));
    setBootstrap( newBootstrap );
}

void AddAnnotationRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CategoryIsSet)
    {
        if (m_Category.get())
        {
            m_Category->toMultipart(multipart, utility::conversions::to_string_t("category."));
        }
    }
    if(m_MemoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("memo"), m_Memo));
    }
    if(m_ExcludeFromBreakdownsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("excludeFromBreakdowns"), m_ExcludeFromBreakdowns));
    }
    m_Bootstrap->toMultipart(multipart, utility::conversions::to_string_t("bootstrap."));
}

void AddAnnotationRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("category")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("category")))
        {
            std::shared_ptr<CleanCategory> newItem(new CleanCategory());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("category."));
            setCategory( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("memo")))
    {
        setMemo(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("memo"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("excludeFromBreakdowns")))
    {
        setExcludeFromBreakdowns(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("excludeFromBreakdowns"))));
    }
    std::shared_ptr<BootstrapStrategy> newBootstrap(new BootstrapStrategy());
    newBootstrap->fromMultiPart(multipart, utility::conversions::to_string_t("bootstrap."));
    setBootstrap( newBootstrap );
}

std::shared_ptr<CleanCategory> AddAnnotationRequest::getCategory() const
{
    return m_Category;
}

void AddAnnotationRequest::setCategory(const std::shared_ptr<CleanCategory>& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}

bool AddAnnotationRequest::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void AddAnnotationRequest::unsetCategory()
{
    m_CategoryIsSet = false;
}

utility::string_t AddAnnotationRequest::getMemo() const
{
    return m_Memo;
}

void AddAnnotationRequest::setMemo(const utility::string_t& value)
{
    m_Memo = value;
    m_MemoIsSet = true;
}

bool AddAnnotationRequest::memoIsSet() const
{
    return m_MemoIsSet;
}

void AddAnnotationRequest::unsetMemo()
{
    m_MemoIsSet = false;
}

bool AddAnnotationRequest::isExcludeFromBreakdowns() const
{
    return m_ExcludeFromBreakdowns;
}

void AddAnnotationRequest::setExcludeFromBreakdowns(bool value)
{
    m_ExcludeFromBreakdowns = value;
    m_ExcludeFromBreakdownsIsSet = true;
}

bool AddAnnotationRequest::excludeFromBreakdownsIsSet() const
{
    return m_ExcludeFromBreakdownsIsSet;
}

void AddAnnotationRequest::unsetExcludeFromBreakdowns()
{
    m_ExcludeFromBreakdownsIsSet = false;
}

std::shared_ptr<BootstrapStrategy> AddAnnotationRequest::getBootstrap() const
{
    return m_Bootstrap;
}

void AddAnnotationRequest::setBootstrap(const std::shared_ptr<BootstrapStrategy>& value)
{
    m_Bootstrap = value;
    
}

}
}
}
}


