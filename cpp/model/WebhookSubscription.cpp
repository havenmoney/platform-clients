/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "WebhookSubscription.h"

namespace dev {
namespace haven {
namespace client {
namespace model {



WebhookSubscription::WebhookSubscription()
{
}

WebhookSubscription::~WebhookSubscription()
{
}

void WebhookSubscription::validate()
{
    // TODO: implement validation
}

web::json::value WebhookSubscription::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eWebhookSubscription::WebhookSubscription_TRANSACTIONS) val = web::json::value::string(U("TRANSACTIONS"));
    if (m_value == eWebhookSubscription::WebhookSubscription_INSTITUTIONS) val = web::json::value::string(U("INSTITUTIONS"));

    return val;
}

void WebhookSubscription::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t("TRANSACTIONS")) m_value = eWebhookSubscription::WebhookSubscription_TRANSACTIONS;
    if (s == utility::conversions::to_string_t("INSTITUTIONS")) m_value = eWebhookSubscription::WebhookSubscription_INSTITUTIONS;
}

void WebhookSubscription::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eWebhookSubscription::WebhookSubscription_TRANSACTIONS) s = utility::conversions::to_string_t("TRANSACTIONS");
    if (m_value == eWebhookSubscription::WebhookSubscription_INSTITUTIONS) s = utility::conversions::to_string_t("INSTITUTIONS");

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

void WebhookSubscription::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        utility::string_t s;
        s = ModelBase::stringFromHttpContent(multipart->getContent(namePrefix));
        eWebhookSubscription v;
        
        
        if (s == utility::conversions::to_string_t("TRANSACTIONS")) v = eWebhookSubscription::WebhookSubscription_TRANSACTIONS;
        if (s == utility::conversions::to_string_t("INSTITUTIONS")) v = eWebhookSubscription::WebhookSubscription_INSTITUTIONS;

        setValue(v);
    }
}

WebhookSubscription::eWebhookSubscription WebhookSubscription::getValue() const
{
   return m_value;
}

void WebhookSubscription::setValue(WebhookSubscription::eWebhookSubscription const value)
{
   m_value = value;
}


}
}
}
}


