/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Address.h"

namespace dev {
namespace haven {
namespace client {
namespace model {




Address::Address()
{
    m_Line1 = utility::conversions::to_string_t("");
    m_Line2 = utility::conversions::to_string_t("");
    m_Line2IsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_State = utility::conversions::to_string_t("");
    m_Zip = utility::conversions::to_string_t("");
    m_CoordinatesIsSet = false;
}

Address::~Address()
{
}

void Address::validate()
{
    // TODO: implement validation
}

web::json::value Address::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("line1")] = ModelBase::toJson(m_Line1);
    if(m_Line2IsSet)
    {
        val[utility::conversions::to_string_t("line2")] = ModelBase::toJson(m_Line2);
    }
    val[utility::conversions::to_string_t("city")] = ModelBase::toJson(m_City);
    val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    val[utility::conversions::to_string_t("zip")] = ModelBase::toJson(m_Zip);
    if(m_CoordinatesIsSet)
    {
        val[utility::conversions::to_string_t("coordinates")] = ModelBase::toJson(m_Coordinates);
    }

    return val;
}

void Address::fromJson(const web::json::value& val)
{
    setLine1(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("line1"))));
    if(val.has_field(utility::conversions::to_string_t("line2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("line2"));
        if(!fieldValue.is_null())
        {
            setLine2(ModelBase::stringFromJson(fieldValue));
        }
    }
    setCity(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("city"))));
    setState(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("state"))));
    setZip(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("zip"))));
    if(val.has_field(utility::conversions::to_string_t("coordinates")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("coordinates"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LatLong> newItem(new LatLong());
            newItem->fromJson(fieldValue);
            setCoordinates( newItem );
        }
    }
}

void Address::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("line1"), m_Line1));
    if(m_Line2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("line2"), m_Line2));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("city"), m_City));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("zip"), m_Zip));
    if(m_CoordinatesIsSet)
    {
        if (m_Coordinates.get())
        {
            m_Coordinates->toMultipart(multipart, utility::conversions::to_string_t("coordinates."));
        }
    }
}

void Address::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setLine1(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("line1"))));
    if(multipart->hasContent(utility::conversions::to_string_t("line2")))
    {
        setLine2(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("line2"))));
    }
    setCity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("city"))));
    setState(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("state"))));
    setZip(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("zip"))));
    if(multipart->hasContent(utility::conversions::to_string_t("coordinates")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("coordinates")))
        {
            std::shared_ptr<LatLong> newItem(new LatLong());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("coordinates."));
            setCoordinates( newItem );
        }
    }
}

utility::string_t Address::getLine1() const
{
    return m_Line1;
}

void Address::setLine1(const utility::string_t& value)
{
    m_Line1 = value;
    
}

utility::string_t Address::getLine2() const
{
    return m_Line2;
}

void Address::setLine2(const utility::string_t& value)
{
    m_Line2 = value;
    m_Line2IsSet = true;
}

bool Address::line2IsSet() const
{
    return m_Line2IsSet;
}

void Address::unsetLine2()
{
    m_Line2IsSet = false;
}

utility::string_t Address::getCity() const
{
    return m_City;
}

void Address::setCity(const utility::string_t& value)
{
    m_City = value;
    
}

utility::string_t Address::getState() const
{
    return m_State;
}

void Address::setState(const utility::string_t& value)
{
    m_State = value;
    
}

utility::string_t Address::getZip() const
{
    return m_Zip;
}

void Address::setZip(const utility::string_t& value)
{
    m_Zip = value;
    
}

std::shared_ptr<LatLong> Address::getCoordinates() const
{
    return m_Coordinates;
}

void Address::setCoordinates(const std::shared_ptr<LatLong>& value)
{
    m_Coordinates = value;
    m_CoordinatesIsSet = true;
}

bool Address::coordinatesIsSet() const
{
    return m_CoordinatesIsSet;
}

void Address::unsetCoordinates()
{
    m_CoordinatesIsSet = false;
}

}
}
}
}


