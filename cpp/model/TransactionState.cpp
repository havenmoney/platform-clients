/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TransactionState.h"

namespace dev {
namespace haven {
namespace client {
namespace model {



TransactionState::TransactionState()
{
}

TransactionState::~TransactionState()
{
}

void TransactionState::validate()
{
    // TODO: implement validation
}

web::json::value TransactionState::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eTransactionState::TransactionState_PENDING) val = web::json::value::string(U("PENDING"));
    if (m_value == eTransactionState::TransactionState_COMPLETED) val = web::json::value::string(U("COMPLETED"));
    if (m_value == eTransactionState::TransactionState_REVERSED) val = web::json::value::string(U("REVERSED"));
    if (m_value == eTransactionState::TransactionState_ERROR) val = web::json::value::string(U("ERROR"));

    return val;
}

void TransactionState::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t("PENDING")) m_value = eTransactionState::TransactionState_PENDING;
    if (s == utility::conversions::to_string_t("COMPLETED")) m_value = eTransactionState::TransactionState_COMPLETED;
    if (s == utility::conversions::to_string_t("REVERSED")) m_value = eTransactionState::TransactionState_REVERSED;
    if (s == utility::conversions::to_string_t("ERROR")) m_value = eTransactionState::TransactionState_ERROR;
}

void TransactionState::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eTransactionState::TransactionState_PENDING) s = utility::conversions::to_string_t("PENDING");
    if (m_value == eTransactionState::TransactionState_COMPLETED) s = utility::conversions::to_string_t("COMPLETED");
    if (m_value == eTransactionState::TransactionState_REVERSED) s = utility::conversions::to_string_t("REVERSED");
    if (m_value == eTransactionState::TransactionState_ERROR) s = utility::conversions::to_string_t("ERROR");

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

void TransactionState::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        utility::string_t s;
        s = ModelBase::stringFromHttpContent(multipart->getContent(namePrefix));
        eTransactionState v;
        
        
        if (s == utility::conversions::to_string_t("PENDING")) v = eTransactionState::TransactionState_PENDING;
        if (s == utility::conversions::to_string_t("COMPLETED")) v = eTransactionState::TransactionState_COMPLETED;
        if (s == utility::conversions::to_string_t("REVERSED")) v = eTransactionState::TransactionState_REVERSED;
        if (s == utility::conversions::to_string_t("ERROR")) v = eTransactionState::TransactionState_ERROR;

        setValue(v);
    }
}

TransactionState::eTransactionState TransactionState::getValue() const
{
   return m_value;
}

void TransactionState::setValue(TransactionState::eTransactionState const value)
{
   m_value = value;
}


}
}
}
}


