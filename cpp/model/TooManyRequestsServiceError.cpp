/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TooManyRequestsServiceError.h"

namespace dev {
namespace haven {
namespace client {
namespace model {




TooManyRequestsServiceError::TooManyRequestsServiceError()
{
    m_Message = utility::conversions::to_string_t("");
}

TooManyRequestsServiceError::~TooManyRequestsServiceError()
{
}

void TooManyRequestsServiceError::validate()
{
    // TODO: implement validation
}

web::json::value TooManyRequestsServiceError::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);

    return val;
}

void TooManyRequestsServiceError::fromJson(const web::json::value& val)
{
    setMessage(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("message"))));
}

void TooManyRequestsServiceError::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
}

void TooManyRequestsServiceError::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setMessage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("message"))));
}

utility::string_t TooManyRequestsServiceError::getMessage() const
{
    return m_Message;
}

void TooManyRequestsServiceError::setMessage(const utility::string_t& value)
{
    m_Message = value;
    
}

}
}
}
}


