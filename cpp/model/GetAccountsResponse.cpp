/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GetAccountsResponse.h"

namespace dev {
namespace haven {
namespace client {
namespace model {




GetAccountsResponse::GetAccountsResponse()
{
}

GetAccountsResponse::~GetAccountsResponse()
{
}

void GetAccountsResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetAccountsResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Accounts )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("accounts")] = web::json::value::array(jsonArray);
    }

    return val;
}

void GetAccountsResponse::fromJson(const web::json::value& val)
{
    {
        m_Accounts.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val.at(utility::conversions::to_string_t("accounts")).as_array() )
        {
            if(item.is_null())
            {
                m_Accounts.push_back( std::shared_ptr<ApiAccount>(nullptr) );
            }
            else
            {
                std::shared_ptr<ApiAccount> newItem(new ApiAccount());
                newItem->fromJson(item);
                m_Accounts.push_back( newItem );
            }
        }
    }
}

void GetAccountsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Accounts )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("accounts"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
}

void GetAccountsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Accounts.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("accounts"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Accounts.push_back( std::shared_ptr<ApiAccount>(nullptr) );
            }
            else
            {
                std::shared_ptr<ApiAccount> newItem(new ApiAccount());
                newItem->fromJson(item);
                m_Accounts.push_back( newItem );
            }
        }
    }
}

std::vector<std::shared_ptr<ApiAccount>>& GetAccountsResponse::getAccounts()
{
    return m_Accounts;
}

void GetAccountsResponse::setAccounts(const std::vector<std::shared_ptr<ApiAccount>>& value)
{
    m_Accounts = value;
    
}

}
}
}
}


