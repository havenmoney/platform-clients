/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TransactionKind.h"

namespace dev {
namespace haven {
namespace client {
namespace model {



TransactionKind::TransactionKind()
{
}

TransactionKind::~TransactionKind()
{
}

void TransactionKind::validate()
{
    // TODO: implement validation
}

web::json::value TransactionKind::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eTransactionKind::TransactionKind_ACH) val = web::json::value::string(U("ACH"));
    if (m_value == eTransactionKind::TransactionKind_FEE) val = web::json::value::string(U("FEE"));
    if (m_value == eTransactionKind::TransactionKind_DEBIT_CARD) val = web::json::value::string(U("DEBIT_CARD"));
    if (m_value == eTransactionKind::TransactionKind_CREDIT_CARD) val = web::json::value::string(U("CREDIT_CARD"));
    if (m_value == eTransactionKind::TransactionKind_REVERSAL) val = web::json::value::string(U("REVERSAL"));
    if (m_value == eTransactionKind::TransactionKind_CHARGE_BACK) val = web::json::value::string(U("CHARGE_BACK"));
    if (m_value == eTransactionKind::TransactionKind_UNKNOWN) val = web::json::value::string(U("UNKNOWN"));

    return val;
}

void TransactionKind::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t("ACH")) m_value = eTransactionKind::TransactionKind_ACH;
    if (s == utility::conversions::to_string_t("FEE")) m_value = eTransactionKind::TransactionKind_FEE;
    if (s == utility::conversions::to_string_t("DEBIT_CARD")) m_value = eTransactionKind::TransactionKind_DEBIT_CARD;
    if (s == utility::conversions::to_string_t("CREDIT_CARD")) m_value = eTransactionKind::TransactionKind_CREDIT_CARD;
    if (s == utility::conversions::to_string_t("REVERSAL")) m_value = eTransactionKind::TransactionKind_REVERSAL;
    if (s == utility::conversions::to_string_t("CHARGE_BACK")) m_value = eTransactionKind::TransactionKind_CHARGE_BACK;
    if (s == utility::conversions::to_string_t("UNKNOWN")) m_value = eTransactionKind::TransactionKind_UNKNOWN;
}

void TransactionKind::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eTransactionKind::TransactionKind_ACH) s = utility::conversions::to_string_t("ACH");
    if (m_value == eTransactionKind::TransactionKind_FEE) s = utility::conversions::to_string_t("FEE");
    if (m_value == eTransactionKind::TransactionKind_DEBIT_CARD) s = utility::conversions::to_string_t("DEBIT_CARD");
    if (m_value == eTransactionKind::TransactionKind_CREDIT_CARD) s = utility::conversions::to_string_t("CREDIT_CARD");
    if (m_value == eTransactionKind::TransactionKind_REVERSAL) s = utility::conversions::to_string_t("REVERSAL");
    if (m_value == eTransactionKind::TransactionKind_CHARGE_BACK) s = utility::conversions::to_string_t("CHARGE_BACK");
    if (m_value == eTransactionKind::TransactionKind_UNKNOWN) s = utility::conversions::to_string_t("UNKNOWN");

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

void TransactionKind::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        utility::string_t s;
        s = ModelBase::stringFromHttpContent(multipart->getContent(namePrefix));
        eTransactionKind v;
        
        
        if (s == utility::conversions::to_string_t("ACH")) v = eTransactionKind::TransactionKind_ACH;
        if (s == utility::conversions::to_string_t("FEE")) v = eTransactionKind::TransactionKind_FEE;
        if (s == utility::conversions::to_string_t("DEBIT_CARD")) v = eTransactionKind::TransactionKind_DEBIT_CARD;
        if (s == utility::conversions::to_string_t("CREDIT_CARD")) v = eTransactionKind::TransactionKind_CREDIT_CARD;
        if (s == utility::conversions::to_string_t("REVERSAL")) v = eTransactionKind::TransactionKind_REVERSAL;
        if (s == utility::conversions::to_string_t("CHARGE_BACK")) v = eTransactionKind::TransactionKind_CHARGE_BACK;
        if (s == utility::conversions::to_string_t("UNKNOWN")) v = eTransactionKind::TransactionKind_UNKNOWN;

        setValue(v);
    }
}

TransactionKind::eTransactionKind TransactionKind::getValue() const
{
   return m_value;
}

void TransactionKind::setValue(TransactionKind::eTransactionKind const value)
{
   m_value = value;
}


}
}
}
}


