/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AddAnnotationRequest.h
 *
 * 
 */

#ifndef DEV_HAVEN_CLIENT_MODEL_AddAnnotationRequest_H_
#define DEV_HAVEN_CLIENT_MODEL_AddAnnotationRequest_H_


#include "../ModelBase.h"

#include "CleanCategory.h"
#include <cpprest/details/basic_types.h>
#include "BootstrapStrategy.h"

namespace dev {
namespace haven {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  AddAnnotationRequest
    : public ModelBase
{
public:
    AddAnnotationRequest();
    virtual ~AddAnnotationRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AddAnnotationRequest members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CleanCategory> getCategory() const;
    bool categoryIsSet() const;
    void unsetCategory();

    void setCategory(const std::shared_ptr<CleanCategory>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMemo() const;
    bool memoIsSet() const;
    void unsetMemo();

    void setMemo(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isExcludeFromBreakdowns() const;
    bool excludeFromBreakdownsIsSet() const;
    void unsetExcludeFromBreakdowns();

    void setExcludeFromBreakdowns(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BootstrapStrategy> getBootstrap() const;
    
    void setBootstrap(const std::shared_ptr<BootstrapStrategy>& value);


protected:
    std::shared_ptr<CleanCategory> m_Category;
    bool m_CategoryIsSet;
    utility::string_t m_Memo;
    bool m_MemoIsSet;
    bool m_ExcludeFromBreakdowns;
    bool m_ExcludeFromBreakdownsIsSet;
    std::shared_ptr<BootstrapStrategy> m_Bootstrap;
    };


}
}
}
}

#endif /* DEV_HAVEN_CLIENT_MODEL_AddAnnotationRequest_H_ */
