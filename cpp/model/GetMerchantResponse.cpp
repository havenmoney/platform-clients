/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GetMerchantResponse.h"

namespace dev {
namespace haven {
namespace client {
namespace model {




GetMerchantResponse::GetMerchantResponse()
{
    m_MerchantIsSet = false;
}

GetMerchantResponse::~GetMerchantResponse()
{
}

void GetMerchantResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetMerchantResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MerchantIsSet)
    {
        val[utility::conversions::to_string_t("merchant")] = ModelBase::toJson(m_Merchant);
    }

    return val;
}

void GetMerchantResponse::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("merchant")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("merchant"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Merchant> newItem(new Merchant());
            newItem->fromJson(fieldValue);
            setMerchant( newItem );
        }
    }
}

void GetMerchantResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_MerchantIsSet)
    {
        if (m_Merchant.get())
        {
            m_Merchant->toMultipart(multipart, utility::conversions::to_string_t("merchant."));
        }
    }
}

void GetMerchantResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("merchant")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("merchant")))
        {
            std::shared_ptr<Merchant> newItem(new Merchant());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("merchant."));
            setMerchant( newItem );
        }
    }
}

std::shared_ptr<Merchant> GetMerchantResponse::getMerchant() const
{
    return m_Merchant;
}

void GetMerchantResponse::setMerchant(const std::shared_ptr<Merchant>& value)
{
    m_Merchant = value;
    m_MerchantIsSet = true;
}

bool GetMerchantResponse::merchantIsSet() const
{
    return m_MerchantIsSet;
}

void GetMerchantResponse::unsetMerchant()
{
    m_MerchantIsSet = false;
}

}
}
}
}


