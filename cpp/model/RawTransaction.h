/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RawTransaction.h
 *
 * 
 */

#ifndef DEV_HAVEN_CLIENT_MODEL_RawTransaction_H_
#define DEV_HAVEN_CLIENT_MODEL_RawTransaction_H_


#include "../ModelBase.h"

#include "TransactionKind.h"
#include "RawMerchantStore.h"
#include "RawMerchant.h"
#include <cpprest/details/basic_types.h>
#include "TransactionState.h"
#include <vector>

namespace dev {
namespace haven {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  RawTransaction
    : public ModelBase
{
public:
    RawTransaction();
    virtual ~RawTransaction();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RawTransaction members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    
    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccount() const;
    
    void setAccount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUser() const;
    
    void setUser(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRawMemo() const;
    
    void setRawMemo(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RawMerchant> getMerchant() const;
    bool merchantIsSet() const;
    void unsetMerchant();

    void setMerchant(const std::shared_ptr<RawMerchant>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RawMerchantStore> getStore() const;
    bool storeIsSet() const;
    void unsetStore();

    void setStore(const std::shared_ptr<RawMerchantStore>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNetwork() const;
    bool networkIsSet() const;
    void unsetNetwork();

    void setNetwork(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getUserTransactedAt() const;
    bool userTransactedAtIsSet() const;
    void unsetUserTransactedAt();

    void setUserTransactedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAmount() const;
    
    void setAmount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getCategories();
    
    void setCategories(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TransactionKind> getKind() const;
    
    void setKind(const std::shared_ptr<TransactionKind>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TransactionState> getState() const;
    
    void setState(const std::shared_ptr<TransactionState>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTags();
    
    void setTags(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Id;
        utility::string_t m_Account;
        utility::string_t m_User;
        utility::string_t m_RawMemo;
        std::shared_ptr<RawMerchant> m_Merchant;
    bool m_MerchantIsSet;
    std::shared_ptr<RawMerchantStore> m_Store;
    bool m_StoreIsSet;
    utility::string_t m_Network;
    bool m_NetworkIsSet;
    utility::datetime m_UserTransactedAt;
    bool m_UserTransactedAtIsSet;
    utility::string_t m_Amount;
        std::vector<utility::string_t> m_Categories;
        std::shared_ptr<TransactionKind> m_Kind;
        std::shared_ptr<TransactionState> m_State;
        std::vector<utility::string_t> m_Tags;
    };


}
}
}
}

#endif /* DEV_HAVEN_CLIENT_MODEL_RawTransaction_H_ */
