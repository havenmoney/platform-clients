/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CleanSingleTransactionRequest.h"

namespace dev {
namespace haven {
namespace client {
namespace model {




CleanSingleTransactionRequest::CleanSingleTransactionRequest()
{
}

CleanSingleTransactionRequest::~CleanSingleTransactionRequest()
{
}

void CleanSingleTransactionRequest::validate()
{
    // TODO: implement validation
}

web::json::value CleanSingleTransactionRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("transaction")] = ModelBase::toJson(m_Transaction);

    return val;
}

void CleanSingleTransactionRequest::fromJson(const web::json::value& val)
{
    std::shared_ptr<RawTransaction> newTransaction(new RawTransaction());
    newTransaction->fromJson(val.at(utility::conversions::to_string_t("transaction")));
    setTransaction( newTransaction );
}

void CleanSingleTransactionRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_Transaction->toMultipart(multipart, utility::conversions::to_string_t("transaction."));
}

void CleanSingleTransactionRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<RawTransaction> newTransaction(new RawTransaction());
    newTransaction->fromMultiPart(multipart, utility::conversions::to_string_t("transaction."));
    setTransaction( newTransaction );
}

std::shared_ptr<RawTransaction> CleanSingleTransactionRequest::getTransaction() const
{
    return m_Transaction;
}

void CleanSingleTransactionRequest::setTransaction(const std::shared_ptr<RawTransaction>& value)
{
    m_Transaction = value;
    
}

}
}
}
}


