/**
 * Haven Money API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CleanTransaction.h
 *
 * 
 */

#ifndef DEV_HAVEN_CLIENT_MODEL_CleanTransaction_H_
#define DEV_HAVEN_CLIENT_MODEL_CleanTransaction_H_


#include "../ModelBase.h"

#include "CleanCategory.h"
#include "Address.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace dev {
namespace haven {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  CleanTransaction
    : public ModelBase
{
public:
    CleanTransaction();
    virtual ~CleanTransaction();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CleanTransaction members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    
    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccount() const;
    
    void setAccount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUser() const;
    
    void setUser(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMemo() const;
    
    void setMemo(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRawMemo() const;
    
    void setRawMemo(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNetwork() const;
    bool networkIsSet() const;
    void unsetNetwork();

    void setNetwork(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getUserTransactedAt() const;
    bool userTransactedAtIsSet() const;
    void unsetUserTransactedAt();

    void setUserTransactedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAmount() const;
    
    void setAmount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getCategories();
    
    void setCategories(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CleanCategory> getCleanCategory() const;
    
    void setCleanCategory(const std::shared_ptr<CleanCategory>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();

    void setUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImage() const;
    bool imageIsSet() const;
    void unsetImage();

    void setImage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBackgroundImage() const;
    bool backgroundImageIsSet() const;
    void unsetBackgroundImage();

    void setBackgroundImage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isExcludeFromBreakdowns() const;
    
    void setExcludeFromBreakdowns(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMerchant() const;
    bool merchantIsSet() const;
    void unsetMerchant();

    void setMerchant(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Address> getMerchantAddress() const;
    bool merchantAddressIsSet() const;
    void unsetMerchantAddress();

    void setMerchantAddress(const std::shared_ptr<Address>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getHistorical();
    
    void setHistorical(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Id;
        utility::string_t m_Account;
        utility::string_t m_User;
        utility::string_t m_Memo;
        utility::string_t m_RawMemo;
        utility::string_t m_Network;
    bool m_NetworkIsSet;
    utility::datetime m_UserTransactedAt;
    bool m_UserTransactedAtIsSet;
    utility::string_t m_Amount;
        std::vector<utility::string_t> m_Categories;
        std::shared_ptr<CleanCategory> m_CleanCategory;
        utility::string_t m_Url;
    bool m_UrlIsSet;
    utility::string_t m_Image;
    bool m_ImageIsSet;
    utility::string_t m_BackgroundImage;
    bool m_BackgroundImageIsSet;
    bool m_ExcludeFromBreakdowns;
        utility::string_t m_Merchant;
    bool m_MerchantIsSet;
    std::shared_ptr<Address> m_MerchantAddress;
    bool m_MerchantAddressIsSet;
    std::vector<utility::string_t> m_Historical;
    };


}
}
}
}

#endif /* DEV_HAVEN_CLIENT_MODEL_CleanTransaction_H_ */
